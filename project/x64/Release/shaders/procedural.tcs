#version 410 core                                                                               
                                                                                                
// define the number of CPs in the output patch                                                 
layout (vertices = 3) out;                                                                      
                                                                                                
uniform vec3 gEyeWorldPos;
uniform float tessLevel;
uniform float tessMultiplier;
					   
uniform vec3 seed;

uniform sampler2D randomTexture;

// attributes of the input CPs                                                                  
in vec3 WorldPos_CS_in[];                                                                       
in vec2 TexCoord_CS_in[];                                                                       
in vec3 Normal_CS_in[];                                                                         
                                                                                                
// attributes of the output CPs                                                                 
out vec3 WorldPos_ES_in[];                                                                      
out vec2 TexCoord_ES_in[];                                                                      
out vec3 Normal_ES_in[]; 

/*
float Random2D(in vec2 st)
{
	return fract(sin(dot(st.xy, vec2(12.9898, 78.233) + seed.xy)) * 43758.5453123);
}
*/

uniform int octaves;
uniform float gDispFactor;      
uniform float freq;
uniform float power;

float Random2D(in vec2 st)
{
	return fract(dot(texture(randomTexture, st/3000).rg, vec2(12.9898, 78.233) + seed.xy));
	//return fract(sin(dot(st.xy, vec2(12.9898, 78.233) + seed.xy)) * 43758.5453123);
}

float Interpolate(float a, float b, float x) {  // cosine interpolation
	float ft = x * 3.1415927f;
	float f = (1 - cos(ft)) * 0.5;
	return  a * (1 - f) + b * f;
}

vec3 InterpolatedNoise(int ind, float x, float y) {
	int integer_X = int(floor(x));
	float fractional_X = fract(x);
	int integer_Y = int(floor(y));
	float fractional_Y = fract(y);
	vec2 randomInput = vec2(integer_X, integer_Y);
	float a = Random2D(randomInput);
	float b = Random2D(randomInput + vec2(1.0, 0.0));
	float c = Random2D(randomInput + vec2(0.0, 1.0));
	float d = Random2D(randomInput + vec2(1.0, 1.0));

	vec2 fracW = vec2(fractional_X, fractional_Y);
	vec2 w = fracW;
	w = w*w*w*(10.0 + w*(-15.0 + 6.0*w));
	vec2 dw = 30*fracW*fracW*(fracW*fracW - 2*fracW + 1);
	

	//fractional_X = smoothstep(0.0, 1.0, fractional_X);
	//fractional_Y = smoothstep(0.0, 1.0, fractional_Y);
	//return a + fractional_X*(b-a) + fractional_Y*c + fractional_X*fractional_Y*(d-c) - a*fractional_Y - fractional_X*fractional_Y*(b-a);
	float k0 = a, 
	k1 = b - a, 
	k2 = c - a, 
	k3 = d - c - b + a;

	float n = k0 + k1*w.x + k2*w.y + k3*w.x*w.y;
	float dndx = (k1 + k3*w.y)*dw.x;
	float dndy = (k2 + k3*w.x)*dw.y;

	return vec3(n, dndx, dndy);
}

const mat2 m = mat2(0.8,-0.6,0.6,0.8);


float perlin(vec2 st){
    
    //st *= freq;
    
    //int numOctaves = 10;
	float persistence = 0.5;
	float total = 0.0,
		frequency = 0.005*freq,
		amplitude = gDispFactor;
	for (int i = 0; i < octaves; ++i) {
		frequency *= 2.0;
		amplitude *= persistence;

        //st = frequency*m*st;

		vec2 v = frequency*m*st;
		vec3 n = InterpolatedNoise(0, v.x,v.y);
		vec2 d = vec2(n.y, n.z);
		total += n.x * amplitude /(1.0 + dot(d,d));
	}
	return pow(total, power);
}


float GetTessLevel(float Distance0, float Distance1)                                            
{                                                       

    float AvgDistance = (Distance0 + Distance1) / 2.0;
    if (AvgDistance <= 60.0*10.0) { 
	        return 200.0;                                                                            
    }
    if (AvgDistance <= 150.0*10.0) { 
        return 50.0;                                                                            
    }
	else if (AvgDistance <= 300.0*10.0) { 
        return 10.0;                                                                            
    }else if(AvgDistance <= 1200.0*10.0){
		return 6.0;
	}
    else if (AvgDistance <= 3000.0*10.0) {  
        return 3.0;                                                                             
    }                                                                                           
    else {                                 
        return 1.0;                                                                             
    }
}                                                                                               
                                                                                                
void main()                                                                                     
{                                                                                               
    // Set the control points of the output patch                                               
    TexCoord_ES_in[gl_InvocationID] = TexCoord_CS_in[gl_InvocationID];                          
    Normal_ES_in[gl_InvocationID]   = Normal_CS_in[gl_InvocationID];                            
    WorldPos_ES_in[gl_InvocationID] = WorldPos_CS_in[gl_InvocationID];                          
                                                                                                
    // Calculate the distance from the camera to the three control points                       
    //vec3 pos = vec3(gEyeWorldPos.x, perlin(gEyeWorldPos.xz), gEyeWorldPos.z);

	vec3 WorldPos1 = vec3(WorldPos_ES_in[0].x, perlin(WorldPos_ES_in[0].xz), WorldPos_ES_in[0].z);
	vec3 WorldPos2 = vec3(WorldPos_ES_in[1].x, perlin(WorldPos_ES_in[1].xz), WorldPos_ES_in[1].z);
	vec3 WorldPos3 = vec3(WorldPos_ES_in[2].x, perlin(WorldPos_ES_in[2].xz), WorldPos_ES_in[2].z);


	float EyeToVertexDistance0 = distance(gEyeWorldPos, WorldPos1);                     
    float EyeToVertexDistance1 = distance(gEyeWorldPos, WorldPos2);                
    float EyeToVertexDistance2 = distance(gEyeWorldPos, WorldPos3);                      
                                                                                                
    // Calculate the tessellation levels                                                        
    gl_TessLevelOuter[0] = tessMultiplier*GetTessLevel(EyeToVertexDistance1, EyeToVertexDistance2);            
    gl_TessLevelOuter[1] = tessMultiplier*GetTessLevel(EyeToVertexDistance2, EyeToVertexDistance0);            
    gl_TessLevelOuter[2] = tessMultiplier*GetTessLevel(EyeToVertexDistance0, EyeToVertexDistance1);            
    gl_TessLevelInner[0] = gl_TessLevelOuter[2];                                                
}                                                                                               